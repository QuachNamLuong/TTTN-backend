// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model User {
  userId       String   @id @default(uuid()) @map("user_id")
  username     String   @unique 
  email        String   @unique 
  passwordHash String   @map("password_hash")
  fullName     String   @map("full_name")
  phoneNumber  String   @map("phone_number")
  address      String   
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt  @map("updated_at")

  roleId String   @map("role_id")
  role   Role     @relation(fields: [roleId], references: [roleId])
  orders Order[]
  cartItems CartItem[]

  @@map("users")
}

model Role {
  roleId     String  @id @default(uuid()) @map("role_id")
  roleName   String  @unique  @map("role_name")
  description String

  users User[]

  @@map("roles")
}

model Order {
  orderId            String     @id @default(uuid()) @map("order_id")
  guestName          String   @map("guest_name")
  guestEmail         String   @map("guest_email")
  guestPhoneNumber         String   @map("guest_phone_number")
  shippingAddress    String @map("shipping_address")
  shippingPhoneNumber String  @map("shipping_phone_number")
  orderTotal         Decimal    @db.Decimal(18, 0) @map("order_total")
  orderStatus        OrderStatus  @map("order_status")
  paymentMethod      Int  @map("payment_method")
  paymentStatus      PaymentStatus  @map("payment_status")
  shippingCost       Decimal    @db.Decimal(18, 0) @map("shipping_cost")
  couponCode         String @map("coupon_code")
  discountAmount     Decimal    @db.Decimal(18, 0) @map("discount_amount")
  orderedAt          DateTime @map("ordered_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  trackingNumber     String @map("tracking_number")
  notes              String

  userId     String?  @map("user_id")
  user       User?       @relation(fields: [userId], references: [userId])
  orderItems OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

model OrderItem {
  orderItemId       String   @id @default(uuid()) @map("order_item_id") 
  quantity          Int
  priceAtPurchase   Decimal  @db.Decimal(18, 0) @map("price_at_purchase")
  totalItemPrice    Decimal  @db.Decimal(18, 0) @map("total_item_price")
  itemStatus        OrderItemStatus @map("item_status")

  orderId           String @map("order_id")
  order             Order    @relation(fields: [orderId], references: [orderId])
  productVariantId  String @map("product_variant_id")
  productVariant    ProductVariant @relation(fields: [productVariantId], references: [productVariantId])

  @@map("order_items")
}

enum OrderItemStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model ProductVariant {
  productVariantId String @id @default(uuid()) @map("product_variant_id")

  productVariantSKU String @unique @map("product_variant_sku")
  price Decimal
  stockQuantity Int @map("stock_quantity")

  productId String @map("product_id")
  product Product @relation(fields: [productId], references: [productId])
  orderItems OrderItem[]
  variantOptionSelections VariantOptionSelection[]
  cartItems CartItem[]

  @@map("product_variants")
}

model Product {
  productId String @id @default(uuid()) @map("product_id")

  productName String @map("product_name")

  brandId String @map("brand_id")
  brand Brand @relation(fields: [brandId], references: [brandId])
  categoryId String @map("category_id")
  category Category @relation(fields: [categoryId], references: [categoryId])
  productVariants ProductVariant[]
  productSpecifications ProductSpecification[]

  @@map("products")
}

model Brand {
  brandId String @id @default(uuid()) @map("brand_id")

  brandName String @unique @map("brand_name")

  products Product[]

  @@map("brands")
}

model Category {
  categoryId String @id @default(uuid()) @map("category_id")

  categoryName String @map("category_name")

  products Product[]
  attributeGroups AttributeGroup[]

  @@map("categories")
}

model VariantOptionSelection {
  variantOptionSelectionId String @id @default(uuid()) @map("variant_option_selection_id")

  optionValueId String @map("option_value_id")
  optionValue OptionValue @relation(fields: [optionValueId], references: [optionValueId])
  productVariantId String @map("product_variant_id")
  productVariant ProductVariant @relation(fields: [productVariantId], references: [productVariantId])

  @@map("variant_option_selections")
}

model OptionValue {
  optionValueId String @id @default(uuid()) @map("option_value_id")

  optionValueName String @map("option_value_name")
  unit String

  optionId String @map("option_id")
  option Option @relation(fields: [optionId], references: [optionId])
  variantOptionSelections VariantOptionSelection[]

  @@map("option_values")
}

model Option {
  optionId String @id @default(uuid()) @map("option_id")
  optionName String @map("option_name")

  optionValues OptionValue[]

  @@map("options")
}

model AttributeGroup {
  attributeGroupId String @id @default(uuid()) @map("attribute_group_id")

  groupName String @map("group_name")
  displayOrder Int @map("display_order")

  categoryId String @map("category_id")
  category Category @relation(fields: [categoryId], references: [categoryId])
  productAttributes ProductAttribute[]

  @@map("attribute_groups")
}

model ProductAttribute {
  productAttributeId String @id @default(uuid()) @map("product_attribute_id")

  attributeName String @map("attribute_name")
  displayOrder Int @map("display_order")
  isFilterable Boolean @map("is_filterable")

  attributeGroupId String @map("attribute_group_id")
  attributeGroup AttributeGroup @relation(fields: [attributeGroupId], references: [attributeGroupId])
  productSpecifications ProductSpecification[]

  @@map("product_attributes")
}

model ProductSpecification {
  productSpecificationId String @id @default(uuid()) @map("product_specification_id")

  attributeValue String @map("attribute_value")

  productId String @map("product_id")
  product Product @relation(fields: [productId], references: [productId])
  productAttributeId String @map("product_attribute_id")
  productAttribute ProductAttribute @relation(fields: [productAttributeId], references: [productAttributeId])

  @@map("product_specifications")
}

model CartItem {
  cartItemId String @id @default(uuid()) @map("cart_item_id")

  sessionId String? @map("session_id")

  userId String? @map("user_id")
  user User? @relation(fields: [userId], references: [userId])
  productVariantId String @map("product_variant_id")
  productVariant ProductVariant @relation(fields: [productVariantId], references: [productVariantId])

  @@map("cart_items")
}